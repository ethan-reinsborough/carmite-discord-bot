"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const src_1 = require("../src");
const client = new src_1.Client();
(() => __awaiter(void 0, void 0, void 0, function* () {
    console.log();
    console.log('first search result for "tenioha"');
    yield client
        .search('tenioha')
        .then(x => console.log(x.videos[0]));
    console.log();
    console.log('fetched video of Aibeya 1');
    console.log();
    yield client
        .fetchVideo('aibeya-1')
        .then(console.log);
    console.log();
    console.log('first server of Kimi Omou Koi 1');
    console.log();
    yield client
        .fetchVideo('kimi-omou-koi-1')
        .then(d => console.log(d.manifest.servers[0]));
    console.log();
    console.log('last 500 videos published in the past month');
    console.log();
    yield client
        .fetchSeasons()
        .then(console.log);
    console.log();
    console.log('10 of all videos published in the past year');
    console.log();
    yield client
        .fetchSeasonAll({ from: new Date().setFullYear(new Date().getFullYear() - 1) })
        .then(d => console.log(d.length, d.map(x => x.name).sort(() => 0.5 - Math.random()).slice(0, 10)));
    console.log();
    console.log('first trending');
    console.log();
    yield client
        .fetchTrending()
        .then(d => d[0].fetch())
        .then(console.log);
    console.log();
    console.log('random brand');
    console.log();
    yield client
        .fetchBrands()
        .then(d => console.log(d[~~(Math.random() * d.length)]));
    console.log();
    console.log('brand uploads of Bunnywalker');
    console.log();
    yield client
        .fetchBrands()
        .then(d => d.find(x => x.title === 'Bunnywalker').fetchUploads())
        .then(d => console.log(d.map(x => x.name)));
    console.log();
    console.log('random 3 tags');
    console.log();
    yield client
        .fetchTags()
        .then(d => console.log(d.sort(() => 0.5 - Math.random()).slice(0, 3)));
    console.log();
    console.log('nekomimi & big boobs tagged videos');
    console.log();
    yield client
        .fetchTags()
        .then(d => d.find(x => x.name === 'nekomimi').fetchVideos('', { tags: ['big boobs'] }))
        .then(d => console.log(d.map(x => x.name)));
    console.log();
    console.log('storyboard for Aikagi 1');
    console.log();
    yield client
        .fetchStoryboards(2197)
        .then(console.log);
    console.log();
    console.log('random 20 results for tags: uncensored');
    console.log();
    yield client
        .searchAll('', { tags: ['uncensored'] })
        .then(x => console.log(x.length, x.sort(() => 0.5 - Math.random()).slice(0, 20).map(x => x.name)));
}))();
