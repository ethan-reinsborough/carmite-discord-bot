"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveSeasonOptions = exports.resolveSearchOptions = exports.getImageURL = void 0;
const resolveDate = (d) => {
    const date = new Date(d);
    return [date.getFullYear(), date.getMonth(), date.getDate()].join('-');
};
/**
 * Convert an invalid image URL to a valid one.
 * @param s The original URL.
 */
exports.getImageURL = (s) => {
    if (!s || s.startsWith('/'))
        return s;
    const path = s
        .replace(/(http[s]{0,1}:\/\/|i\d\.wp\.com\/)/, '')
        .split('/')
        .slice(1)
        .join('/');
    return /\/archived-assets-\d+\./.test(s)
        ? `https://i1.wp.com/archived-assets-${s
            .replace(/http[s]:\/\//, '')
            .split('/')[0]
            .split('.')[0]
            .split('-')
            .pop()}.imageg.top${path}`
        : `https://i1.wp.com/static-assets.droidbuzz.top/${path}`;
};
/**
 * Resolve search options to an API-compatible format.
 * @param str The string to search.
 * @param d The search options.
 * @param def The options to optionally merge.
 */
exports.resolveSearchOptions = (str, d, def) => {
    var _a;
    return ({
        search_text: str,
        tags: [].concat(d.tags || [], (def === null || def === void 0 ? void 0 : def.tags) || []),
        tags_mode: ((_a = ['and', 'or']
            .find(x => x === d.tagMode)) === null || _a === void 0 ? void 0 : _a.toUpperCase()) || 'AND',
        brands: [].concat(d.brands || [], (def === null || def === void 0 ? void 0 : def.brands) || []),
        blacklist: d.blacklist || [],
        order_by: d.orderBy || 'created_at_unix',
        ordering: d.ordering || 'desc',
        page: isNaN(d.page) ? 0 : d.page,
    });
};
exports.resolveSeasonOptions = (d = {}) => {
    var _a;
    return ({
        orderBy: d.orderBy || 'released_at',
        ordering: ((_a = d.ordering) === null || _a === void 0 ? void 0 : _a.toUpperCase()) || 'ASC',
        from: resolveDate(d.from || new Date().setMonth(new Date().getMonth() || 11)),
        to: resolveDate(d.to || new Date().setMonth(new Date().getMonth() === 11 ? 0 : new Date().getMonth() + 1)),
        page: isNaN(d.page) ? 0 : d.page,
    });
};
