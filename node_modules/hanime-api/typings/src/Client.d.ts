import { SearchOptions, BrowseResponse, SeasonOptions } from './util/types';
import { PartialVideo } from './structures/PartialVideo';
import { PartialFetchedVideo } from './structures/PartialFetchedVideo';
import { Video } from './structures/Video';
import { Tag } from './structures/Tag';
import { Brand } from './structures/Brand';
import { Storyboard } from './structures/Storyboard';
import { SeasonalVideo } from './structures/SeasonalVideo';
/**
 * The main class for handling HTTP requests.
 */
export declare class Client {
    /**
     * The video cache of the client.
     */
    videos: Map<string, Video>;
    /**
     * The storyboard cache of the client.
     */
    storyboards: Map<string, Storyboard[]>;
    /**
     * The /browse endpoint cache of the client.
     */
    browseCache?: BrowseResponse;
    constructor();
    /**
     * Private method internally used for making requests.
     */
    private request;
    /**
     * Private method internally used for fetching the /browse endpoint.
     */
    private browse;
    /**
     * Private method internally used for fetching the main page.
     */
    private landing;
    /**
     * Search videos based on the specified string and options. Returns page-based results, use {@link searchAll} to get all results of all pages.
     * @param str The string to search. If empty, only the specified options apply.
     * @param options Other, optional options.
     */
    search(str: string, options?: SearchOptions): Promise<{
        page: number;
        pageCount: number;
        videoCount: number;
        videosPerPage: number;
        videos: PartialVideo[];
    }>;
    /**
     * Returns all results of all pages of a {@link search}.
     * @param str The string to search. If empty, only the specified options apply.
     * @param options Other, optional options.
     */
    searchAll(str: string, options?: SearchOptions): Promise<PartialVideo[]>;
    /**
     * Get up to 500 videos published between 2 specified dates.
     * @param options The options to search according to.
     */
    fetchSeasons(options?: SeasonOptions): Promise<{
        videos: SeasonalVideo[];
        total: number;
        page: number;
    }>;
    /**
     * Returns all results of all pages of a {@link fetchSeasons} call.
     * @param options The options to search according to.
     */
    fetchSeasonAll(options?: SeasonOptions): Promise<SeasonalVideo[]>;
    /**
     * Fetch data of a video.
     * @param d The partial video, the slug or the ID to fetch.
     */
    fetchVideo(d: string | number | PartialVideo | PartialFetchedVideo | SeasonalVideo): Promise<Video>;
    /**
     * Fetch the storyboards of a video. Doesn't accept a slug for uncached storyboards.
     * @param d The partial video, or ID of the video to fetch the storyboards of.
     */
    fetchStoryboards(d: string | number | PartialVideo | PartialFetchedVideo | SeasonalVideo): Promise<Storyboard[]>;
    /**
     * Fetch all available tags.
     */
    fetchTags(): Promise<Tag[]>;
    /**
     * Fetch all available brands.
     */
    fetchBrands(): Promise<Brand[]>;
    /**
     * Fetch recent video uploads.
     */
    fetchRecentUploads(): Promise<{
        id: number;
        fetch: () => Promise<Video>;
    }[]>;
    /**
     * Fetch recent releases.
     */
    fetchNewReleases(): Promise<{
        id: number;
        fetch: () => Promise<Video>;
    }[]>;
    /**
     * Fetch trending videos.
     */
    fetchTrending(): Promise<{
        id: number;
        fetch: () => Promise<Video>;
    }[]>;
    /**
     * Fetch random videos.
     */
    fetchRandom(): Promise<{
        id: number;
        fetch: () => Promise<Video>;
    }[]>;
}
