import { Client } from '../Client';
import { PartialFetchedVideo as IPartialFetchedVideo } from '../util/types';
import { PartialTag } from './PartialTag';
declare const toOmit: readonly ["description", "tags", "is_visible", "is_hard_subtitled", "is_banned_in", "created_at_unix", "released_at_unix", "rating", "preview_url", "primary_color", "hentai_tags", "poster_url", "cover_url", "brand_id", "duration_in_ms", "is_censored", "monthly_rank", "created_at", "released_at"];
interface PartialFetchedVideo extends Omit<IPartialFetchedVideo, Exclude<(typeof toOmit)[number], 'description'>> {
}
/**
 * Organized data of a video accessed via another video.
 */
declare class PartialFetchedVideo {
    /**
     * The client that instantiated the video.
     */
    readonly client: Client;
    /**
     * The video's raw data.
     */
    readonly raw: IPartialFetchedVideo;
    /**
     * The video's description.
     */
    description: string | undefined;
    /**
     * The video's hanime.tv URL.
     */
    url: string;
    /**
     * The video's poster URL.
     */
    poster: string;
    /**
     * The video's cover URL.
     */
    cover: string;
    /**
     * The video's brand's ID.
     */
    brandID: number;
    /**
     * The video's duration.
     */
    duration: number;
    /**
     * Whether the video is censored.
     */
    censored: boolean;
    /**
     * The video's rank on the monthly ranking list.
     */
    monthlyRank: number;
    /**
     * The date at which the video was created.
     */
    createdAt: Date;
    /**
     * The unix timestamp at which the video was created.
     */
    createdTimestamp: number;
    /**
     * The date at which the video was released.
     */
    releasedAt: Date;
    /**
     * The unix timestamp at which the video was released.
     */
    releasedTimestamp: number;
    /**
     * The tags assigned to this video.
     */
    tags: PartialTag[];
    /**
     * Whether the video is visible.
     */
    visible: boolean;
    /**
     * Whether the video is hard subtitled.
     */
    hardSubtitled: boolean;
    /**
     * Countries which the video is banned in.
     */
    bannedIn: string[];
    /** @ignore */
    constructor(client: Client, raw: IPartialFetchedVideo);
    /**
     * Fetch full video data.
     */
    fetch(): Promise<import("./Video").Video>;
    /**
     * Fetch the storyboards of this video.
     */
    fetchStoryboards(): Promise<import("./Storyboard").Storyboard[]>;
}
export { PartialFetchedVideo };
