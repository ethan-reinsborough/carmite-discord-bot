import { Client } from '../Client';
import { PartialVideo as IPartialVideo } from '../util/types';
declare const toOmit: readonly ["description", "rating", "poster_url", "cover_url", "brand_id", "duration_in_ms", "is_censored", "monthly_rank", "created_at", "released_at"];
interface PartialVideo extends Omit<IPartialVideo, Exclude<(typeof toOmit)[number], 'description'>> {
}
declare class PartialVideo {
    readonly client: Client;
    readonly raw: IPartialVideo;
    /**
     * The video's description.
     */
    description: string;
    /**
     * The video's hanime.tv URL.
     */
    url: string;
    /**
     * The video's poster URL.
     */
    poster: string;
    /**
     * The video's cover URL.
     */
    cover: string;
    /**
     * The video's brand's ID.
     */
    brandID: number;
    /**
     * The video's duration.
     */
    duration: number;
    /**
     * Whether the video is censored.
     */
    censored: boolean;
    /**
     * The video's rank on the monthly ranking list.
     */
    monthlyRank: number;
    /**
     * The date at which the video was created.
     */
    createdAt: Date;
    /**
     * The unix timestamp at which the video was created.
     */
    createdTimestamp: number;
    /**
     * The date at which the video was released.
     */
    releasedAt: Date;
    /**
     * The unix timestamp at which the video was released.
     */
    releasedTimestamp: number;
    /** @ignore */
    constructor(client: Client, raw: IPartialVideo);
    /**
     * Fetch full video data.
     */
    fetch(): Promise<import("./Video").Video>;
    /**
     * Fetch the storyboards of this video.
     */
    fetchStoryboards(): Promise<import("./Storyboard").Storyboard[]>;
}
export { PartialVideo };
